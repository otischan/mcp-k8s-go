// Code generated by MockGen. DO NOT EDIT.
// Source: internal/k8s/pool.go
//
// Generated by this command:
//
//	mockgen -source=internal/k8s/pool.go -destination=internal/k8s/mock/pool_mock.go
//

// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	reflect "reflect"

	list_mapping "github.com/strowk/mcp-k8s-go/internal/k8s/list_mapping"
	gomock "go.uber.org/mock/gomock"
	dynamic "k8s.io/client-go/dynamic"
	informers "k8s.io/client-go/informers"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockClientPool is a mock of ClientPool interface.
type MockClientPool struct {
	ctrl     *gomock.Controller
	recorder *MockClientPoolMockRecorder
	isgomock struct{}
}

// MockClientPoolMockRecorder is the mock recorder for MockClientPool.
type MockClientPoolMockRecorder struct {
	mock *MockClientPool
}

// NewMockClientPool creates a new mock instance.
func NewMockClientPool(ctrl *gomock.Controller) *MockClientPool {
	mock := &MockClientPool{ctrl: ctrl}
	mock.recorder = &MockClientPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientPool) EXPECT() *MockClientPoolMockRecorder {
	return m.recorder
}

// GetClientset mocks base method.
func (m *MockClientPool) GetClientset(k8sContext string) (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientset", k8sContext)
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientset indicates an expected call of GetClientset.
func (mr *MockClientPoolMockRecorder) GetClientset(k8sContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientset", reflect.TypeOf((*MockClientPool)(nil).GetClientset), k8sContext)
}

// GetDynamicClient mocks base method.
func (m *MockClientPool) GetDynamicClient(k8sContext string) (dynamic.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamicClient", k8sContext)
	ret0, _ := ret[0].(dynamic.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDynamicClient indicates an expected call of GetDynamicClient.
func (mr *MockClientPoolMockRecorder) GetDynamicClient(k8sContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamicClient", reflect.TypeOf((*MockClientPool)(nil).GetDynamicClient), k8sContext)
}

// GetInformer mocks base method.
func (m *MockClientPool) GetInformer(k8sCtx, kind, group, version string) (informers.GenericInformer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInformer", k8sCtx, kind, group, version)
	ret0, _ := ret[0].(informers.GenericInformer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInformer indicates an expected call of GetInformer.
func (mr *MockClientPoolMockRecorder) GetInformer(k8sCtx, kind, group, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInformer", reflect.TypeOf((*MockClientPool)(nil).GetInformer), k8sCtx, kind, group, version)
}

// GetListMapping mocks base method.
func (m *MockClientPool) GetListMapping(k8sCtx, kind, group, version string) list_mapping.ListMapping {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMapping", k8sCtx, kind, group, version)
	ret0, _ := ret[0].(list_mapping.ListMapping)
	return ret0
}

// GetListMapping indicates an expected call of GetListMapping.
func (mr *MockClientPoolMockRecorder) GetListMapping(k8sCtx, kind, group, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMapping", reflect.TypeOf((*MockClientPool)(nil).GetListMapping), k8sCtx, kind, group, version)
}
